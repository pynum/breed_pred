# -*- coding: utf-8 -*-
"""breed_model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gnBZdkhqt_sw-fConj_8me_85GY8CLeJ
"""

from google.colab import drive
drive.mount('/content/drive')

import numpy as np
import pandas as pd
from tqdm import tqdm
from sklearn.preprocessing import label_binarize
from sklearn.model_selection import train_test_split
from tensorflow.keras.applications import VGG16
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, GlobalAveragePooling2D
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.preprocessing.image import load_img, img_to_array
import matplotlib.pyplot as plt

# Selecting 10 dog breeds for this example
CLASS_NAME = ['labrador_retriever', 'golden_retriever', 'german_shepherd', 'bulldog', 'beagle', 'boxer', 'poodle', 'dachshund', 'pug' , 'entlebucher']

# Load and preprocess data
labels_all = pd.read_csv('/content/drive/MyDrive/dataset/labels.csv')
labels = labels_all[labels_all['breed'].isin(CLASS_NAME)].reset_index(drop=True)
X_data = np.zeros((len(labels), 224, 224, 3), dtype='float32')
Y_data = label_binarize(labels['breed'], classes=CLASS_NAME)

import os
from tqdm import tqdm
from keras.utils import load_img, img_to_array

X_data = np.zeros((len(labels), 224, 224, 3))  # Assuming labels is a DataFrame with length equal to the number of images

for i in tqdm(range(len(labels))):
    file_path = '/content/drive/MyDrive/dataset/train/%s.jpg' % labels['id'][i]

    if os.path.exists(file_path):
        try:
            img = load_img(file_path, target_size=(224, 224))
            img = img_to_array(img)
            X_data[i] = img / 255.0
        except Exception as e:
            print(f"Error loading image {file_path}: {e}")
    else:
        print(f"File not found: {file_path}")

# Load the pre-trained VGG16 model without the top layers
base_model = VGG16(weights='imagenet', include_top=False, input_shape=(224, 224, 3))
# Add a GlobalAveragePooling2D layer to flatten the output of the base model
model = Sequential([
base_model,
GlobalAveragePooling2D(),
Dense(256, activation='relu'),
Dense(len(CLASS_NAME), activation='softmax')
])

# Compile the model
model.compile(loss='categorical_crossentropy', optimizer=Adam(learning_rate=0.0001), metrics=['accuracy'])

# Split the dataset into training and testing sets
X_train_and_val, X_test, Y_train_and_val, Y_test = train_test_split(X_data, Y_data, test_size=0.1, random_state=42)
X_train, X_val, Y_train, Y_val = train_test_split(X_train_and_val, Y_train_and_val, test_size=0.2, random_state=42)

# Train the model
epochs = 10
batch_size = 128
history = model.fit(X_train, Y_train, batch_size=batch_size, epochs=epochs, validation_data=(X_val, Y_val))

# Evaluate the model on the test set
loss, accuracy = model.evaluate(X_test, Y_test)
print("Test Loss:", loss)
print("Test Accuracy:", accuracy)

from keras.utils import load_img, img_to_array
import numpy as np

image_path = '/content/bulldog.jpg'

def predict_image(img_path):
    img = load_img(img_path, target_size=(224, 224))
    img = img_to_array(img) / 255.0
    img = np.expand_dims(img, axis=0)
    prediction = model.predict(img)
    predicted_class = CLASS_NAME[np.argmax(prediction)]
    print("Predicted Breed:", predicted_class)

# Call the function to make a prediction
predict_image(image_path)

# Save your model in the Keras format
model.save('my_model.keras')

